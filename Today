import pandas as pd
import matplotlib
matplotlib.use('Agg')  # Use non-interactive backend
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.gridspec import GridSpec
from matplotlib.patches import Rectangle
import numpy as np
import os
import warnings

# Suppress warnings
warnings.filterwarnings('ignore')

# ============================================
# CONFIGURATION: Set your server name here
# ============================================
SERVER_NAME = "PROD-SERVER-01"  # Change this to your server name
# ============================================

# Read your CSV file
df = pd.read_csv('your_data.csv')

# Convert date to datetime - handle timezone properly
df['Date'] = pd.to_datetime(df['Date'].str.replace(r' CDT| CST| EST| PST| MST', '', regex=True))

# Sort by date
df = df.sort_values('Date').reset_index(drop=True)

# Set style for beautiful graphs
sns.set_style("whitegrid")
plt.rcParams['figure.facecolor'] = 'white'
plt.rcParams['axes.facecolor'] = '#fafbfc'
plt.rcParams['grid.alpha'] = 0.3
plt.rcParams['font.family'] = 'sans-serif'

# Create figure with custom layout
fig = plt.figure(figsize=(28, 18))
gs = GridSpec(5, 5, figure=fig, hspace=0.4, wspace=0.35, top=0.93, bottom=0.06, left=0.04, right=0.98)

# Color palette - professional colors
colors = ['#2E86AB', '#A23B72', '#F18F01', '#C73E1D', '#6A994E', 
          '#BC4749', '#F77F00', '#06AED5', '#9D4EDD', '#118AB2',
          '#073B4C', '#EF476F', '#FFD166', '#06FFA5', '#8338EC']

def create_scatter(ax, x, y, color, title):
    """Helper function to create consistent scatter plots"""
    ax.scatter(x, y, alpha=0.6, color=color, s=40, edgecolors='white', linewidth=0.8)
    
    # Add trend line if correlation exists
    if len(x) > 2 and x.std() > 0 and not np.isnan(x).any() and not np.isnan(y).any():
        try:
            z = np.polyfit(x, y, 1)
            p = np.poly1d(z)
            ax.plot(x, p(x), "--", color=color, alpha=0.4, linewidth=2)
        except:
            pass  # Skip trend line if fitting fails
    
    ax.set_title(title, fontsize=12, fontweight='bold', pad=8)
    ax.set_xlabel('Connections', fontsize=10)
    ax.grid(True, alpha=0.25, linestyle='--', linewidth=0.5)
    ax.spines['top'].set_visible(False)
    ax.spines['right'].set_visible(False)
    ax.tick_params(labelsize=9)

# Row 0: Key Metrics Summary Cards (spans 4 columns)
ax_summary = fig.add_subplot(gs[0, :4])
ax_summary.axis('off')

# Calculate key metrics
avg_conn = df['Connections'].mean()
max_conn = df['Connections'].max()
avg_cpu = df['CPU (% used)'].mean()
avg_mem = df['Memory (used %)'].mean()
total_discarded = df['Discarded events'].sum()
total_outofsynce = df['Out-of-sync events'].sum()

# Create metric cards
card_width = 0.19
cards_data = [
    {'title': 'Avg Connections', 'value': f"{avg_conn:.0f}", 'color': '#2E86AB'},
    {'title': 'Peak Connections', 'value': f"{max_conn:.0f}", 'color': '#A23B72'},
    {'title': 'Avg CPU Usage', 'value': f"{avg_cpu:.1f}%", 'color': '#F18F01'},
    {'title': 'Avg Memory', 'value': f"{avg_mem:.1f}%", 'color': '#6A994E'},
    {'title': 'Total Discarded', 'value': f"{total_discarded:.0f}", 'color': '#C73E1D'},
]

for i, card in enumerate(cards_data):
    x_pos = 0.02 + i * (card_width + 0.01)
    rect = Rectangle((x_pos, 0.2), card_width, 0.6, transform=ax_summary.transAxes,
                     facecolor=card['color'], alpha=0.15, edgecolor=card['color'], linewidth=2)
    ax_summary.add_patch(rect)
    ax_summary.text(x_pos + card_width/2, 0.65, card['title'], transform=ax_summary.transAxes,
                   fontsize=11, ha='center', fontweight='bold', color='#333')
    ax_summary.text(x_pos + card_width/2, 0.35, card['value'], transform=ax_summary.transAxes,
                   fontsize=16, ha='center', fontweight='bold', color=card['color'])

# Connection Timeline (spans full width of row 0, column 4)
ax_timeline = fig.add_subplot(gs[0, 4])
ax_timeline.plot(df['Date'], df['Connections'], linewidth=2.5, color='#2E86AB', marker='o', markersize=3)
ax_timeline.fill_between(df['Date'], df['Connections'], alpha=0.2, color='#2E86AB')
ax_timeline.set_title('Connection Timeline', fontsize=12, fontweight='bold', pad=8)
ax_timeline.set_ylabel('Connections', fontsize=10)
ax_timeline.grid(True, alpha=0.25, linestyle='--', linewidth=0.5)
ax_timeline.tick_params(axis='x', rotation=45, labelsize=8)
ax_timeline.tick_params(axis='y', labelsize=9)
ax_timeline.spines['top'].set_visible(False)
ax_timeline.spines['right'].set_visible(False)

# Row 1: Critical Events & Volumes
ax1 = fig.add_subplot(gs[1, 0])
create_scatter(ax1, df['Connections'], df['Out-of-sync events'], colors[0], 'Out-of-sync Events')
ax1.set_ylabel('Events', fontsize=10)

ax2 = fig.add_subplot(gs[1, 1])
create_scatter(ax2, df['Connections'], df['Discarded events'], colors[1], 'Discarded Events')
ax2.set_ylabel('Events', fontsize=10)

ax3 = fig.add_subplot(gs[1, 2])
create_scatter(ax3, df['Connections'], df['Input volume (MB)'], colors[2], 'Input Volume (MB)')
ax3.set_ylabel('MB', fontsize=10)

ax4 = fig.add_subplot(gs[1, 3])
create_scatter(ax4, df['Connections'], df['Input volume rate (MB/s)'], colors[3], 'Input Rate (MB/s)')
ax4.set_ylabel('MB/s', fontsize=10)

# Row 1, Col 4: Correlation heatmap (compact)
ax_corr = fig.add_subplot(gs[1, 4])
key_metrics = ['Connections', 'CPU (% used)', 'Memory (used %)', 'Input volume (MB)']
corr_mini = df[key_metrics].corr()
sns.heatmap(corr_mini, annot=True, fmt='.2f', cmap='RdYlBu_r', center=0, 
            square=True, linewidths=1, cbar=False, ax=ax_corr,
            annot_kws={'fontsize': 8})
ax_corr.set_title('Key Correlations', fontsize=12, fontweight='bold', pad=8)
ax_corr.tick_params(labelsize=8)

# Row 2: GEMNI Outputs
ax5 = fig.add_subplot(gs[2, 0])
create_scatter(ax5, df['Connections'], df['GEMNI output volume (MB)'], colors[4], 'GEMNI Volume (MB)')
ax5.set_ylabel('MB', fontsize=10)

ax6 = fig.add_subplot(gs[2, 1])
create_scatter(ax6, df['Connections'], df['GEMNI output rate (MB/s)'], colors[5], 'GEMNI Rate (MB/s)')
ax6.set_ylabel('MB/s', fontsize=10)

# Row 2: SMANPD Outputs
ax7 = fig.add_subplot(gs[2, 2])
create_scatter(ax7, df['Connections'], df['SMANPD output volume (MB)'], colors[6], 'SMANPD Volume (MB)')
ax7.set_ylabel('MB', fontsize=10)

ax8 = fig.add_subplot(gs[2, 3])
create_scatter(ax8, df['Connections'], df['SMANPD output rate (MB/s)'], colors[7], 'SMANPD Rate (MB/s)')
ax8.set_ylabel('MB/s', fontsize=10)

# Row 2, Col 4: Output comparison
ax_output = fig.add_subplot(gs[2, 4])
ax_output.scatter(df['GEMNI output rate (MB/s)'], df['SMANPD output rate (MB/s)'], 
                 alpha=0.6, color=colors[8], s=50, edgecolors='white', linewidth=0.8)
ax_output.set_xlabel('GEMNI Rate', fontsize=10)
ax_output.set_ylabel('SMANPD Rate', fontsize=10)
ax_output.set_title('Output Rate Comparison', fontsize=12, fontweight='bold', pad=8)
ax_output.grid(True, alpha=0.25, linestyle='--', linewidth=0.5)
ax_output.spines['top'].set_visible(False)
ax_output.spines['right'].set_visible(False)

# Row 3: Memory Metrics
ax9 = fig.add_subplot(gs[3, 0])
create_scatter(ax9, df['Connections'], df['Memory (GB)'], colors[9], 'Total Memory (GB)')
ax9.set_ylabel('GB', fontsize=10)

ax10 = fig.add_subplot(gs[3, 1])
create_scatter(ax10, df['Connections'], df['Memory (used GB)'], colors[10], 'Used Memory (GB)')
ax10.set_ylabel('GB', fontsize=10)

ax11 = fig.add_subplot(gs[3, 2])
create_scatter(ax11, df['Connections'], df['Memory (used %)'], colors[11], 'Memory Usage (%)')
ax11.set_ylabel('%', fontsize=10)

ax12 = fig.add_subplot(gs[3, 3])
create_scatter(ax12, df['Connections'], df['CPU (% used)'], colors[12], 'Total CPU (%)')
ax12.set_ylabel('%', fontsize=10)

# Row 3, Col 4: CPU/Memory relationship
ax_resource = fig.add_subplot(gs[3, 4])
scatter = ax_resource.scatter(df['CPU (% used)'], df['Memory (used %)'], 
                             c=df['Connections'], cmap='viridis', s=50, alpha=0.6, edgecolors='white', linewidth=0.8)
ax_resource.set_xlabel('CPU %', fontsize=10)
ax_resource.set_ylabel('Memory %', fontsize=10)
ax_resource.set_title('CPU vs Memory', fontsize=12, fontweight='bold', pad=8)
ax_resource.grid(True, alpha=0.25, linestyle='--', linewidth=0.5)
ax_resource.spines['top'].set_visible(False)
ax_resource.spines['right'].set_visible(False)
cbar = plt.colorbar(scatter, ax=ax_resource)
cbar.set_label('Connections', fontsize=9)
cbar.ax.tick_params(labelsize=8)

# Row 4: CPU Breakdown & Disk
ax13 = fig.add_subplot(gs[4, 0])
create_scatter(ax13, df['Connections'], df['CPU (user %)'], colors[13], 'CPU User (%)')
ax13.set_ylabel('%', fontsize=10)

ax14 = fig.add_subplot(gs[4, 1])
create_scatter(ax14, df['Connections'], df['CPU (system %)'], colors[14], 'CPU System (%)')
ax14.set_ylabel('%', fontsize=10)

ax15 = fig.add_subplot(gs[4, 2])
create_scatter(ax15, df['Connections'], df['Disk data0 (% used)'], colors[1], 'Disk Usage (%)')
ax15.set_ylabel('%', fontsize=10)

# Row 4, Col 3: Time-based pattern analysis
ax_pattern = fig.add_subplot(gs[4, 3])
ax_pattern.scatter(df.index, df['Connections'], alpha=0.6, color=colors[0], s=30)
ax_pattern.set_xlabel('Record Index', fontsize=10)
ax_pattern.set_ylabel('Connections', fontsize=10)
ax_pattern.set_title('Connection Pattern', fontsize=12, fontweight='bold', pad=8)
ax_pattern.grid(True, alpha=0.25, linestyle='--', linewidth=0.5)
ax_pattern.spines['top'].set_visible(False)
ax_pattern.spines['right'].set_visible(False)

# Row 4, Col 4: Insights & Statistics
ax_insights = fig.add_subplot(gs[4, 4])
ax_insights.axis('off')

# Calculate correlations
conn_cpu_corr = df['Connections'].corr(df['CPU (% used)'])
conn_mem_corr = df['Connections'].corr(df['Memory (used %)'])
conn_disc_corr = df['Connections'].corr(df['Discarded events'])

insights_text = f"""
KEY INSIGHTS
{'='*30}

Data Points: {len(df)}
Time Range: {(df['Date'].max() - df['Date'].min()).days} days

CONNECTION IMPACT:
• CPU: {conn_cpu_corr:+.3f} correlation
• Memory: {conn_mem_corr:+.3f} correlation  
• Discarded: {conn_disc_corr:+.3f} correlation

RESOURCE PEAKS:
• Max CPU: {df['CPU (% used)'].max():.1f}%
• Max Memory: {df['Memory (used %)'].max():.1f}%
• Max Disk: {df['Disk data0 (% used)'].max():.1f}%

THROUGHPUT:
• Avg Input: {df['Input volume rate (MB/s)'].mean():.1f} MB/s
• Avg GEMNI: {df['GEMNI output rate (MB/s)'].mean():.1f} MB/s
• Avg SMANPD: {df['SMANPD output rate (MB/s)'].mean():.1f} MB/s
"""

ax_insights.text(0.05, 0.95, insights_text, transform=ax_insights.transAxes,
                fontsize=10, verticalalignment='top', fontfamily='monospace',
                bbox=dict(boxstyle='round,pad=0.8', facecolor='#f0f4f8', 
                         edgecolor='#2E86AB', linewidth=2, alpha=0.9))

# Main title
fig.suptitle(f'{SERVER_NAME}', fontsize=28, fontweight='bold', y=0.985, x=0.5, ha='center')

# Add subtitle with date range
subtitle = f"Performance Analysis | {df['Date'].min().strftime('%Y-%m-%d')} to {df['Date'].max().strftime('%Y-%m-%d')}"
fig.text(0.5, 0.96, subtitle, fontsize=12, ha='center', color='#666')

# Save as single PNG file
output_file = os.path.join(os.getcwd(), f'{SERVER_NAME}.png')
plt.savefig(output_file, dpi=300, bbox_inches='tight', facecolor='white', edgecolor='none')
plt.close('all')  # Close all figures to free memory
print(f"\n✅ Professional dashboard saved: {output_file}")

# Print detailed analysis
print(f"\n{'='*60}")
print(f"  {SERVER_NAME} - PERFORMANCE ANALYSIS COMPLETE")
print(f"{'='*60}")
print(f"\n📊 Correlation Analysis (vs Connections):")
metrics_to_analyze = [
    'Out-of-sync events', 'Discarded events', 'Input volume (MB)', 
    'CPU (% used)', 'Memory (used %)', 'Disk data0 (% used)'
]
for metric in metrics_to_analyze:
    corr = df['Connections'].corr(df[metric])
    strength = 'Strong' if abs(corr) > 0.7 else 'Moderate' if abs(corr) > 0.4 else 'Weak'
    print(f"  • {metric:.<40} {corr:+.3f} ({strength})")

print(f"\n{'='*60}\n")

# Exit cleanly
print("✅ Script completed successfully. Exiting...")
import sys
sys.exit(0)
